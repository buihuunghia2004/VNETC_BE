Index: src/modules/service/serService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ServiceModel} from \"~/models/serviceModel\";\r\nimport {ServiceDetailModel} from \"~/models/serviceDetailModel\";\r\nimport ApiErr from \"~/utils/ApiError\";\r\nimport {StatusCodes} from \"http-status-codes\";\r\n\r\nclass SerService {\r\n    async addService(data) {\r\n        try {\r\n            const service = new ServiceModel(data);\r\n            await service.save();\r\n\r\n            const newOrder = new ServiceDetailModel({\r\n                serviceId: service._id,\r\n                content: data.content,\r\n                createdBy: data.createdBy\r\n            });\r\n            await newOrder.save();\r\n\r\n            return [service, newOrder];\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async getService({page, limit}) {\r\n        try {\r\n            const service = await ServiceModel.find().skip(limit * (page - 1)).limit(limit).sort({createdAt: -1})\r\n            return service\r\n        } catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n\r\n    async deleteService(serviceId) {\r\n        try {\r\n            await ServiceDetailModel.deleteMany({serviceId: serviceId});\r\n            const result = await ServiceModel.findByIdAndDelete(serviceId);\r\n            if (!result) {\r\n                throw new Error('Service not found');\r\n            }\r\n\r\n            return result;\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async updateService(serviceId, data) {\r\n        try {\r\n            const service = await ServiceModel.findByIdAndUpdate(serviceId, data, {new: true});\r\n            if (!service) {\r\n                throw new Error('Service not found');\r\n            }\r\n            if (data.content || data.updatedBy) {\r\n                await ServiceDetailModel.updateMany(\r\n                    {serviceId: serviceId},\r\n                    {\r\n                        $set: {\r\n                            ...(data.content && {content: data.content}),\r\n                            ...(data.updatedBy && {updatedBy: data.updatedBy})\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            return service;\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    async getServiceById(serviceId) {\r\n        try {\r\n            const service = await ServiceModel.findById(serviceId);\r\n            if (!service) {\r\n                throw new ApiErr(StatusCodes.BAD_REQUEST, \"Service detail not found\");\r\n            }\r\n\r\n            const serviceDetails = await ServiceDetailModel.findOne({serviceId: serviceId});\r\n            if (!serviceDetails) {\r\n                throw new ApiErr(StatusCodes.BAD_REQUEST, \"Service details not found\");\r\n            }\r\n            const data = {\r\n                _id: service._id,\r\n                name: service.name,\r\n                createdBy: service.createdBy,\r\n                updatedBy: service.updatedBy,\r\n                createdAt: service.createdAt,\r\n                updatedAt: service.updatedAt,\r\n                content: serviceDetails.content // Ensure content is included\r\n            };\r\n            return data;\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst Service = new SerService()\r\n\r\nexport default Service
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/service/serService.js b/src/modules/service/serService.js
--- a/src/modules/service/serService.js	(revision 811b1a172b3a66efdeed3aedf4d037f21e7c441e)
+++ b/src/modules/service/serService.js	(date 1720772840427)
@@ -87,7 +87,7 @@
                 updatedBy: service.updatedBy,
                 createdAt: service.createdAt,
                 updatedAt: service.updatedAt,
-                content: serviceDetails.content // Ensure content is included
+                content: serviceDetails.content
             };
             return data;
         } catch (e) {
